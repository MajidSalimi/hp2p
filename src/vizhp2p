#!/usr/bin/env python
#
# Copyright (C) 2010-2019 CEA/DAM
# Copyright (C) 2010-2019 Laurent Nguyen <laurent.nguyen@cea.fr>
#
# This file is part of HP2P.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".

import os
import sys
import time
import matplotlib
import numpy as np
import matplotlib.pylab as pl
from mpldatacursor import datacursor
# Command line parsing library
from optparse import OptionParser

# min and max for reference colormap
vmin_ref=1e8
vmax_ref=3e9

lat_vmin_ref=0.0
lat_vmax_ref=1e-5
    

def loop(first=False): 
    # refresh only on first call or if modification time lower than
    # refresh time
    if (first or 
        (time.time() - os.path.getmtime(resfile_time)) < refresh_in_sec):
        # try to load data (sometimes file is created but empty)
        try:
            data_time = np.fromfile(resfile_time, dtype="float64"
                                    ).reshape((-1,3))
        except:
            return
        # clear and draw empty canvas
        pl.clf()
        fig1.canvas.draw()        
        fig2.canvas.draw()        
        

        # reload data
        a = np.fromfile(resfile, dtype="float64")
        a = a.reshape((int(np.sqrt(a.size)), -1))

        b = np.fromfile(timefile, dtype="float64")
        b = b.reshape((int(np.sqrt(b.size)), -1))
        
        c_tab = np.fromfile(countfile, dtype="int32")
        c_tab = c_tab.reshape((int(np.sqrt(c_tab.size)), -1))
                
        # statistics
        a_nz = a[a > 0]
        stat_st = "Min. : %.3f" % (a_nz.min()/(1024*1024)) + "\n"
        stat_st += "Max. : %.3f" %  (a_nz.max()/(1024*1024)) + "\n"
        stat_st += "Mean: %.3f" %  (a_nz.mean()/(1024*1024)) + "\n"
        stat_st += "Std. : %.3f" % (a_nz.std()/(1024*1024)) + "\n"

        b_nz = b[b > 0]
        b_stat_st = "Min. : %.2f" % (b_nz.min()*1000000) + "\n"
        b_stat_st += "Max. : %.2f" % (b_nz.max()*1000000) + "\n"
        b_stat_st += "Mean: %.2f" %  (b_nz.mean()*1000000) + "\n"
        b_stat_st += "Std. : %.2f" % (b_nz.std()*1000000) + "\n"

        # del a_nz

        # all but the diagonal
        mask = ~(np.eye(a.shape[0]).astype(bool))
        b_mask = ~(np.eye(b.shape[0]).astype(bool))

        # mean and standard deviation without diagonal
        a_mean = a[mask].reshape((a.shape[0] - 1, a.shape[1])).mean(0)
        a_std = a[mask].reshape((a.shape[0] - 1, a.shape[1])).std(0)

        b_mean = b[mask].reshape((b.shape[0] - 1, b.shape[1])).mean(0)
        b_std = b[mask].reshape((b.shape[0] - 1, b.shape[1])).std(0)


        # retrieve rank/hostname
        nodes = {}
        if(hostfile == None):
            for i in range(0,a.size):
                nodes[str(i)] = "rank_%d"%i
        else:
            motif_rank='rank'
            separator='='
            with open(hostfile) as fd:
                for line in fd:
                    if line.startswith(motif_rank):
                        print line
                        c,v = line[len(motif_rank)+1:-1].split(separator)
                        nodes[c] = v
                        
        # display k worst nodes indices
        print "\nTop %d bad mean:" % k
        mean_order = np.argsort(a_mean)
        print [nodes[str(c)] for c in mean_order[:k]]
        mean_st = "Top nodes with bad mean:\n"
        for i in range(0, k, hostname_per_line):
            mean_st += repr([nodes[str(c)] for c 
                             in mean_order[i:i + hostname_per_line]]) + "\n"

        print "Top %d bad std:" % k
        print [nodes[str(c)] for c in np.argsort(a_std)[-k:][::-1]]

        print "Top %d bad mean/std:" % k
        pen_order = np.argsort(a_mean / a_std)
        print [nodes[str(c)] for c in pen_order[:k]]
        pen_st = "Top nodes with bad mean/std:\n"
        for i in range(0, k, hostname_per_line):
            pen_st += repr([nodes[str(c)] for c 
                            in pen_order[i:i + hostname_per_line]]) + "\n"
    
        # number of bars in histograms
        a_bins = max(5, a.shape[0] / 10)

        # number of bars in histograms
        b_bins = max(5, a.shape[0] / 10)


        # mean histogram
        fig1ax2 = fig1.add_subplot(2, 3, 4)
        nn,nbins,fig1ax2img = fig1ax2.hist(a_mean, bins=a_bins)
        fig1ax2.set_title("Distribution of mean\n bandwidth per rank", size=9)
        
        fig2ax2 = fig2.add_subplot(2, 3, 4)
        nn,nbins,fig2ax2img = fig2ax2.hist(b_mean, bins=b_bins)
        fig2ax2.set_title("Distribution of mean\n latency per rank", size=9)

        # mean of all histogram
        fig1ax4 = fig1.add_subplot(2, 3, 5)
        nn,nbins,fig1ax4img = fig1ax4.hist(a_nz, bins=a_bins)
        fig1ax4.set_title("Distribution of all bandwidth", size=9)
        
        fig2ax4 = fig2.add_subplot(2, 3, 5)
        nn,nbins,fig2ax4img = fig2ax4.hist(b_nz, bins=b_bins)
        fig2ax4.set_title("Distribution of all latency", size=9)

        # p2p reference communication matrix
        fig1ax3 = fig1.add_subplot(2, 3, 3)
        fig1ax3imgplot = fig1ax3.imshow(a, vmin=vmin_ref, 
                             vmax=vmax_ref, interpolation="nearest")
        fig1ax3imgplot.set_cmap('hot_r')
        fig1.colorbar(fig1ax3imgplot)
        fig1ax3.set_title("Point-to-point communication matrix\n"
                 "(reference scale)", size=9)

        fig2ax3 = fig2.add_subplot(2, 3, 3)
        fig2ax3imgplot = fig2ax3.imshow(b, vmin=lat_vmin_ref, 
                             vmax=lat_vmax_ref, interpolation="nearest")
        fig2ax3imgplot.set_cmap('hot_r')
        fig2.colorbar(fig2ax3imgplot)
        fig2ax3.set_title("Point-to-point communication matrix\n"
                 "(reference scale)", size=9)   
        
        # p2p adaptive communication matrix
        fig1ax5 = fig1.add_subplot(2, 3, 6)
        fig1ax5imgplot = fig1ax5.imshow(a, vmin=a[a > 0].min(), 
                              vmax=a.max(), interpolation="nearest")    
        fig1ax5imgplot.set_cmap('hot_r')
        fig1.colorbar(fig1ax5imgplot)
        fig1ax5.set_title("Point-to-point communication matrix\n"
                 "(adaptive scale)", size=9)

        fig2ax5 = fig2.add_subplot(2, 3, 6)
        fig2ax5imgplot = fig2ax5.imshow(b, vmin=b[b > 0].min(), 
                              vmax=b.max(), interpolation="nearest")    
        fig2ax5imgplot.set_cmap('hot_r')
        fig2.colorbar(fig2ax5imgplot)
        fig2ax5.set_title("Point-to-point communication matrix\n"
                 "(adaptive scale)", size=9)

        # Number of counts
        fig2ax = fig2.add_subplot(2, 3, 1)
        fig2aximgplot = fig2ax.imshow(c_tab,vmin=c_tab.min(), 
                              vmax=c_tab.max(), interpolation="nearest")    
        fig2aximgplot.set_cmap('hot_r')
        fig2.colorbar(fig2aximgplot)
        fig2ax.set_title("Number of measures", size=9)


        #formatting popup
        def display_rank_bw(**kwargs):
            x = int(float(kwargs['x'])+0.5)
            y = int(float(kwargs['y'])+0.5)
            z = float(kwargs['z']) / (1024*1024) # in MB
            return "Send : " + nodes[str(x)] + "\n" + \
                "Recv : " + nodes[str(y)] + "\n" + \
                "Bandwidth = %0.2f"%z + " MB/s"

        def display_rank_lat(**kwargs):
            x = int(float(kwargs['x'])+0.5)
            y = int(float(kwargs['y'])+0.5)
            z = float(kwargs['z']) * 1000000 # in us
            return "Send : " + nodes[str(x)] + "\n" + \
                "Recv : " + nodes[str(y)] + "\n" + \
                "Time = %0.2f"%z + " us"

        def display_rank_count(**kwargs):
            x = int(kwargs['x'])
            y = int(kwargs['y'])
            z = int(kwargs['z'])
            return "Send : " + nodes[str(x)] + "\n" + \
                "Recv : " + nodes[str(y)] + "\n" + \
                "Count = %d"%z 

        def display_hist_bw(**kwargs):
            x = float(kwargs['left'])
            width = float(kwargs['width'])
            bw = (x + 0.5 * width) / (1024*1024)
            return "Bandwidth: %0.2f"%(bw) + " MB/s"

        def display_hist_lat(**kwargs):
            x = float(kwargs['left'])
            width = float(kwargs['width'])
            lat = (x + 0.5 * width) * 1000000
            return "Latency: %0.2f"%(lat) + " us"
    
        # Data cursor
        datacursor(fig1ax3imgplot,display='single', \
                       draggable=True,formatter=display_rank_bw)

        datacursor(fig1ax5imgplot,display='single', \
                       draggable=True,formatter=display_rank_bw)

        datacursor(fig2ax3imgplot,display='single', \
                       draggable=True,formatter=display_rank_lat)

        datacursor(fig2ax5imgplot,display='single', \
                       draggable=True,formatter=display_rank_lat)

        datacursor(fig2aximgplot,display='single', \
                       draggable=True,formatter=display_rank_count)

        datacursor(fig1ax4img,display='single', xytext=(0, 20), 
                   formatter=display_hist_bw)

        datacursor(fig2ax4img,display='single', xytext=(0, 20), 
                   formatter=display_hist_lat)

        datacursor(fig1ax2img,display='single', xytext=(0, 20), 
                   formatter=display_hist_bw)

        datacursor(fig2ax2img,display='single', xytext=(0, 20), 
                   formatter=display_hist_lat)

        # time profile per iteration
        fig1ax = fig1.add_subplot(2, 3, 1)
        fig1ax.set_yscale('log')
        data_time[data_time == 0] = data_time[data_time > 0].min() / 2.
        fig1ax.plot((data_time.sum(1)))
        for i in range(3):
            fig1ax.plot((data_time[:, i])) 
        fig1ax.legend(["Total time", "Random time", 
                   "Communication time", "Log/output time"],
                  loc=4, prop={'size':9})
        fig1ax.set_title("Time profile per iteration (logscale)", size=9)

        # textual statistics + worst nodes + usage
        fig1ax7 = fig1.add_subplot(2, 3, 2) 
        txt_box = stat_st + "\n" + mean_st + "\n" + pen_st + "\n"
        txt_box += "(Automatic refresh every 60 sec or press 'r' once)\n"
        txt_box += "(press 'p' to generate a png)\n"
        txt_box += "(press 'q' to quit)\n"
        fig1ax7.text(0, 5, txt_box) 
        fig1ax7.set_ylim(0, 45)
        fig1ax7.set_xlim(0, 15)
        pl.setp(fig1.gca(), frame_on=False, xticks=(), yticks=())

        fig2ax7 = fig2.add_subplot(2, 3, 2) 
        txt_box = b_stat_st + "\n"
        txt_box += "(Automatic refresh every 60 sec or press 'r' once)\n"
        txt_box += "(press 'p' to generate a png)\n"
        txt_box += "(press 'q' to quit)\n"
        fig2ax7.text(0, 5, txt_box) 
        fig2ax7.set_ylim(0, 45)
        fig2ax7.set_xlim(0, 15)
        pl.setp(fig2.gca(), frame_on=False, xticks=(), yticks=())

        # redraw canvas
        fig1.canvas.draw()
        fig2.canvas.draw()


# wait for key 'r' (refresh), 'q' (quit)
# and 'p' (snapshot) 
def onrefresh(event):
    if event.key == 'r':
        print "refreshing...",
        loop()
        print "ok"
    elif event.key == 'q':
        exit()
    elif event.key == 'p':
        snapfile = outputname + "_snapshot.png"
        fig1.savefig(snapfile)
        snapfile = outputname + "_snapshot_time.png"
        fig2.savefig(snapfile)
        print 'snapshot saved (%s)' % snapfile
    else:
        print "The answer to %s is 42." % event.key


if __name__ == "__main__":
    if not sys.argv[1:]:
        script_argv=['-h']
    else:
        script_argv=sys.argv[1:]
    
    usage="%prog [options] OUTPUTNAME"
    version="%prog 1.0"
    description="Visualization for HP2P Benchmark"
    contact="laurent.nguyen@cea.fr"
    epilog="Please contact "+contact+" for help"
    parser = OptionParser(usage=usage,
                          version=version,
                          description=description,
                          epilog=epilog)
    parser.add_option("-H","--hostfile",
                      action="store",
                      dest="hostfile",
                      default=None,
                      help="hostfile for corresponding \
MPI rank in OpenMPI style [Default=%default]")
    parser.add_option("-r","--resolution",
                      action="store",
                      dest="resolution",
                      default="1920x1080@72",
                      help="Set resolution for GUI [Default=%default]")
    parser.add_option("-b","--badnodes",
                      action="store",
                      dest="k",
                      default="10",
                      help="Display the K worst nodes [Default=%default]")
    (options, args) = parser.parse_args(script_argv)

    hostfile = options.__dict__["hostfile"]
    resolution = options.__dict__["resolution"]
    k = int(options.__dict__["k"])
    
    if (len(args) == 0):
        print("No DATAFILE given!")
        exit(0)
    else:
        outputname = args[0]
        resfile = args[0] + ".bin"
        resfile_time = outputname + ".bin_timer"
        timefile = outputname + ".time.bin"
        countfile = outputname + ".count.bin"

    print("visu_hp2p configuration:")
    print("   DATAFILE            : %s"%resfile)
    print("   BIN_TIMER_FILE      : %s"%resfile_time)
    print("   HOSTFILE            : %s"%hostfile)
    print("   Bad nodes to display: %d"%k)
    print("   GUI resolution      : %s"%resolution)

    hostname_per_line = 4 # for GUI layout
    refresh_in_sec = 60

    # parse en set resolution
    resolution, dpi = resolution.split("@")
    res_x, res_y = resolution.split('x')
    dpi = int(dpi)
    res_x = int(res_x)
    res_y = int(res_y)
    fig1 = pl.figure(1,figsize=(res_x / dpi, res_y / dpi))
    fig2 = pl.figure(2,figsize=(res_x / dpi, res_y / dpi))

    # wait for resfile
    while not os.path.exists(resfile) :
        time.sleep(5)
        print "Waiting for input files..."

    # add callback on key press event
    cid1 = fig1.canvas.mpl_connect('key_press_event', onrefresh)
    cid2 = fig2.canvas.mpl_connect('key_press_event', onrefresh)

    # add a timer callback for refreshing
    timer = fig1.canvas.new_timer(interval=(refresh_in_sec * 1000))
    timer.add_callback(loop)
    timer.start()

    # first display
    loop(first=True)
    pl.show()
